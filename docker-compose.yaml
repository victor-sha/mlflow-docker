version: '3.8'

services:

    minio:
        container_name: minio                                   # имя контейнера
        hostname: minio                                         # для взаимодействия с nginx
        image: quay.io/minio/minio:RELEASE.2022-05-08T23-50-31Z # имя образа из dockerhub
        command: server --console-address ":9001" /data/        # поднимает консольный сервер нашего хранилища
        expose:                                                 # объявляем порты, которые будут видны внутри docker
            - "9000"
            - "9001"
        networks:
            - s3                                                # указываем сеть, чтобы docker соединить с nginx
        environment:
            MINIO_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}              # берется из файла с переменными .env
            MINIO_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
        healthcheck:                                            # проверяет ,что сервис работает
            test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            interval: 30s
            timeout: 20s
            retries: 3
        volumes:                                                # чтобы сохранять информацию даже после удаления контейнера Docker
            - ./data/minio/:/data                             # имя указывается относительно docker-compose.yaml файла
                                                                # ./Docker/minio - адрес на нашем хосте, на котором мы подняли контейнер
                                                                # /data - адрес внутри контейнера
                                                                
    nginx:
        image: nginx:1.19.2-alpine
        container_name: nginx
        hostname: nginx
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
        ports:
            - "9000:9000"                                       # внешний порт на хосте : внутренный порт в docker
            - "9001:9001"
        networks:
            - s3
        depends_on:                                             # дождаться загрузки minio
            - minio

    db:
        container_name: postgres
        image: postgres
        restart: always
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            PGDATA: /data/postgres
        volumes:
            - postgres:/data/postgres
        ports:
            - 5432:5432
        networks:
            - postgres

    pgadmin:
        container_name: pgadmin
        image: dpage/pgadmin4
        restart: always
        environment:
            PGADMIN_DEFAULT_EMAIL: admin@admin.com
            PGADMIN_DEFAULT_PASSWORD: root    
        volumes:
            - ./data/pgadmin/:/var/lib/pgadmin
        ports:
            - "5050:80"
        networks:
            - postgres     

    mlflow:
        container_name: mlflow_server
        # image: mlflow_server
        build: ./mlflow_image
        restart: always
        ports:
            - "5001:5000"
        networks:
            - postgres
            - s3
        environment:
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - MLFLOW_S3_ENDPOINT_URL=http://nginx:9000
            # --default-artifact-root s3://${AWS_S3_BUCKET} 
        command: >
            mlflow server 
            --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}
            --artifacts-destination s3://${AWS_S3_BUCKET} 
            --serve-artifacts
            --host 0.0.0.0
        depends_on:
            - db

networks:
    s3:
        driver: bridge
    postgres:
        driver: bridge

volumes:
    postgres: